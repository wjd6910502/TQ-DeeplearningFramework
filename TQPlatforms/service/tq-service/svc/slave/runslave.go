// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 8907ffca23
// Version Date: 2019年11月27日 星期三 21时28分21秒 UTC

package slave

import (
  "syscall"
  "os/signal"
  "os"
  "server/service/tq-service/env"
  util "server/service/tq-service/util"
)

func Init()  {
  env.Init()
}

func Run( ) {

  c := make(chan os.Signal)
  //监听指定信号 ctrl+c kill
  signal.Notify(c, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGUSR1, syscall.SIGUSR2, syscall.SIGCHLD)
    go func() {
        for s := range c {
            switch s {
            case syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT:
                util.Infof("退出 %v", s)
                os.Exit(3)
            case syscall.SIGUSR1:
                util.Infof("usr1 %v", s)
                os.Exit(0)
            case syscall.SIGUSR2:
                util.Infof("usr2 %v", s)
                os.Exit(0)
            case syscall.SIGCHLD:
                util.Infof("************sig proces back")
            default:
                util.Infof("other %v", s)
            }
        }
    }()

  // Mechanical domain.
  errc := make(chan int32)
  go func() {
    Init()
    util.Info("start slave...................")
    errc <- FSM()
  }()

  // Run!
  util.Infof("exit %v", <-errc)
}
