// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server.proto

// 定义你的包名

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TaskRequest struct {
	Taskid       string `protobuf:"bytes,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Ipcnt        string `protobuf:"bytes,2,opt,name=ipcnt,proto3" json:"ipcnt,omitempty"`
	Slotcnt      string `protobuf:"bytes,3,opt,name=slotcnt,proto3" json:"slotcnt,omitempty"`
	Cpucnt       string `protobuf:"bytes,4,opt,name=cpucnt,proto3" json:"cpucnt,omitempty"`
	Memsize      string `protobuf:"bytes,5,opt,name=memsize,proto3" json:"memsize,omitempty"`
	Algtype      string `protobuf:"bytes,6,opt,name=algtype,proto3" json:"algtype,omitempty"`
	Batchsize    string `protobuf:"bytes,7,opt,name=batchsize,proto3" json:"batchsize,omitempty"`
	Epoch        string `protobuf:"bytes,8,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Learningrate string `protobuf:"bytes,9,opt,name=learningrate,proto3" json:"learningrate,omitempty"`
	Loadpath     string `protobuf:"bytes,10,opt,name=loadpath,proto3" json:"loadpath,omitempty"`
	Savepath     string `protobuf:"bytes,11,opt,name=savepath,proto3" json:"savepath,omitempty"`
	Param1       string `protobuf:"bytes,12,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2       string `protobuf:"bytes,13,opt,name=param2,proto3" json:"param2,omitempty"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}
func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(m, src)
}
func (m *TaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetTaskid() string {
	if m != nil {
		return m.Taskid
	}
	return ""
}

func (m *TaskRequest) GetIpcnt() string {
	if m != nil {
		return m.Ipcnt
	}
	return ""
}

func (m *TaskRequest) GetSlotcnt() string {
	if m != nil {
		return m.Slotcnt
	}
	return ""
}

func (m *TaskRequest) GetCpucnt() string {
	if m != nil {
		return m.Cpucnt
	}
	return ""
}

func (m *TaskRequest) GetMemsize() string {
	if m != nil {
		return m.Memsize
	}
	return ""
}

func (m *TaskRequest) GetAlgtype() string {
	if m != nil {
		return m.Algtype
	}
	return ""
}

func (m *TaskRequest) GetBatchsize() string {
	if m != nil {
		return m.Batchsize
	}
	return ""
}

func (m *TaskRequest) GetEpoch() string {
	if m != nil {
		return m.Epoch
	}
	return ""
}

func (m *TaskRequest) GetLearningrate() string {
	if m != nil {
		return m.Learningrate
	}
	return ""
}

func (m *TaskRequest) GetLoadpath() string {
	if m != nil {
		return m.Loadpath
	}
	return ""
}

func (m *TaskRequest) GetSavepath() string {
	if m != nil {
		return m.Savepath
	}
	return ""
}

func (m *TaskRequest) GetParam1() string {
	if m != nil {
		return m.Param1
	}
	return ""
}

func (m *TaskRequest) GetParam2() string {
	if m != nil {
		return m.Param2
	}
	return ""
}

type TaskResponse struct {
	TaskId  string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Retcode string `protobuf:"bytes,2,opt,name=retcode,proto3" json:"retcode,omitempty"`
	ErrCode string `protobuf:"bytes,3,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (m *TaskResponse) Reset()         { *m = TaskResponse{} }
func (m *TaskResponse) String() string { return proto.CompactTextString(m) }
func (*TaskResponse) ProtoMessage()    {}
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}
func (m *TaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResponse.Merge(m, src)
}
func (m *TaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *TaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResponse proto.InternalMessageInfo

func (m *TaskResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskResponse) GetRetcode() string {
	if m != nil {
		return m.Retcode
	}
	return ""
}

func (m *TaskResponse) GetErrCode() string {
	if m != nil {
		return m.ErrCode
	}
	return ""
}

type TaskStatusRequest struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *TaskStatusRequest) Reset()         { *m = TaskStatusRequest{} }
func (m *TaskStatusRequest) String() string { return proto.CompactTextString(m) }
func (*TaskStatusRequest) ProtoMessage()    {}
func (*TaskStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}
func (m *TaskStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatusRequest.Merge(m, src)
}
func (m *TaskStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatusRequest proto.InternalMessageInfo

func (m *TaskStatusRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type TaskStatusResponse struct {
	TaskId  string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ErrCode string `protobuf:"bytes,3,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (m *TaskStatusResponse) Reset()         { *m = TaskStatusResponse{} }
func (m *TaskStatusResponse) String() string { return proto.CompactTextString(m) }
func (*TaskStatusResponse) ProtoMessage()    {}
func (*TaskStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{3}
}
func (m *TaskStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatusResponse.Merge(m, src)
}
func (m *TaskStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *TaskStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatusResponse proto.InternalMessageInfo

func (m *TaskStatusResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TaskStatusResponse) GetErrCode() string {
	if m != nil {
		return m.ErrCode
	}
	return ""
}

func init() {
	proto.RegisterType((*TaskRequest)(nil), "server.TaskRequest")
	proto.RegisterType((*TaskResponse)(nil), "server.TaskResponse")
	proto.RegisterType((*TaskStatusRequest)(nil), "server.TaskStatusRequest")
	proto.RegisterType((*TaskStatusResponse)(nil), "server.TaskStatusResponse")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x14, 0x6c, 0x0a, 0xdb, 0x8f, 0xd7, 0x16, 0x09, 0x77, 0xb5, 0xb8, 0x15, 0x8a, 0x50, 0x4e, 0x08,
	0xa1, 0x46, 0x94, 0x1b, 0x47, 0x56, 0x08, 0x71, 0x2d, 0xdc, 0x40, 0x5a, 0xdc, 0xe4, 0x91, 0x44,
	0x9b, 0xc4, 0xa9, 0xfd, 0x52, 0x69, 0x39, 0xf2, 0x0b, 0x90, 0xf8, 0x2d, 0xfc, 0x07, 0x8e, 0x2b,
	0x71, 0xe1, 0x08, 0x2d, 0x3f, 0x04, 0xd9, 0x4e, 0x77, 0x5b, 0x09, 0xd8, 0xe3, 0xcc, 0xf8, 0xcd,
	0x1b, 0x4f, 0x1c, 0x18, 0x6a, 0x54, 0x6b, 0x54, 0xb3, 0x4a, 0x49, 0x92, 0xac, 0xe3, 0xd0, 0xf4,
	0x45, 0x92, 0x51, 0x5a, 0x2f, 0x67, 0x91, 0x2c, 0xc2, 0x02, 0x49, 0xac, 0x51, 0x69, 0x0c, 0x49,
	0xd5, 0x5a, 0x87, 0x31, 0x7e, 0x20, 0x85, 0x18, 0x26, 0x52, 0x26, 0x39, 0x52, 0x9a, 0xa9, 0xb8,
	0x12, 0x8a, 0x2e, 0x42, 0x51, 0x96, 0x92, 0x04, 0x65, 0xb2, 0xd4, 0xce, 0x2e, 0xf8, 0xd5, 0x86,
	0xc1, 0x1b, 0xa1, 0xcf, 0x17, 0xb8, 0xaa, 0x51, 0x13, 0x3b, 0x81, 0x0e, 0x09, 0x7d, 0x9e, 0xc5,
	0xdc, 0x7b, 0xe0, 0x3d, 0xec, 0x2f, 0x1a, 0xc4, 0x8e, 0xe1, 0x28, 0xab, 0xa2, 0x92, 0x78, 0xdb,
	0xd2, 0x0e, 0x30, 0x0e, 0x5d, 0x9d, 0x4b, 0x32, 0xfc, 0x2d, 0xcb, 0xef, 0xa0, 0xf1, 0x89, 0xaa,
	0xda, 0x08, 0xb7, 0x9d, 0x8f, 0x43, 0x66, 0xa2, 0xc0, 0x42, 0x67, 0x1f, 0x91, 0x1f, 0xb9, 0x89,
	0x06, 0x1a, 0x45, 0xe4, 0x09, 0x5d, 0x54, 0xc8, 0x3b, 0x4e, 0x69, 0x20, 0xbb, 0x0f, 0xfd, 0xa5,
	0xa0, 0x28, 0xb5, 0x53, 0x5d, 0xab, 0x5d, 0x13, 0x26, 0x19, 0x56, 0x32, 0x4a, 0x79, 0xcf, 0x25,
	0xb3, 0x80, 0x05, 0x30, 0xcc, 0x51, 0xa8, 0x32, 0x2b, 0x13, 0x25, 0x08, 0x79, 0xdf, 0x8a, 0x07,
	0x1c, 0x9b, 0x42, 0x2f, 0x97, 0x22, 0xae, 0x04, 0xa5, 0x1c, 0xac, 0x7e, 0x85, 0x8d, 0xa6, 0xc5,
	0x1a, 0xad, 0x36, 0x70, 0xda, 0x0e, 0x9b, 0xbb, 0x55, 0x42, 0x89, 0xe2, 0x09, 0x1f, 0xba, 0xbb,
	0x39, 0x74, 0xc5, 0xcf, 0xf9, 0x68, 0x8f, 0x9f, 0x07, 0xef, 0x60, 0xe8, 0x2a, 0xd6, 0x95, 0x2c,
	0x35, 0xb2, 0x7b, 0xd0, 0x35, 0xad, 0x9e, 0x1d, 0x96, 0xfc, 0x2a, 0x36, 0x15, 0x28, 0xa4, 0x48,
	0xc6, 0xd8, 0xd4, 0xbc, 0x83, 0x6c, 0x02, 0x3d, 0x54, 0xea, 0xcc, 0x4a, 0x4d, 0xd3, 0xa8, 0xd4,
	0xa9, 0x8c, 0x31, 0x78, 0x0c, 0x77, 0x8d, 0xfb, 0x6b, 0x12, 0x54, 0xeb, 0xdd, 0x67, 0xfc, 0xd7,
	0x8a, 0xe0, 0x3d, 0xb0, 0xfd, 0xd3, 0x37, 0x25, 0x3a, 0x81, 0x8e, 0xb6, 0x47, 0x9b, 0x40, 0x0d,
	0xfa, 0x4f, 0x9e, 0xf9, 0x57, 0x0f, 0xda, 0xb4, 0x62, 0x0b, 0x80, 0x53, 0x85, 0x82, 0xd0, 0xac,
	0x63, 0xe3, 0x59, 0xf3, 0x88, 0xf7, 0xde, 0xda, 0xf4, 0xf8, 0x90, 0x74, 0x59, 0x82, 0xc9, 0xa7,
	0xef, 0xbf, 0xbf, 0xb4, 0xc7, 0xc1, 0x9d, 0x90, 0x56, 0x61, 0x64, 0x2d, 0x4c, 0x98, 0x67, 0xde,
	0x23, 0xf6, 0x16, 0x46, 0x2f, 0x91, 0xae, 0xf3, 0xb3, 0xc9, 0xbe, 0xc3, 0x41, 0x03, 0xd3, 0xe9,
	0xdf, 0xa4, 0x66, 0xc5, 0xd8, 0xae, 0x18, 0xb1, 0x81, 0x59, 0x91, 0x20, 0x19, 0xff, 0xe7, 0xfc,
	0xdb, 0xc6, 0xf7, 0x2e, 0x37, 0xbe, 0xf7, 0x73, 0xe3, 0x7b, 0x9f, 0xb7, 0x7e, 0xeb, 0x72, 0xeb,
	0xb7, 0x7e, 0x6c, 0xfd, 0xd6, 0xb2, 0x63, 0x7f, 0x95, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x32, 0x28, 0x44, 0x09, 0x89, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TqClient is the client API for Tq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TqClient interface {
	// EchoRequest 和EchoResponse 在下面的代码中定义
	CreateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error)
}

type tqClient struct {
	cc *grpc.ClientConn
}

func NewTqClient(cc *grpc.ClientConn) TqClient {
	return &tqClient{cc}
}

func (c *tqClient) CreateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/server.tq/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tqClient) GetTaskStatus(ctx context.Context, in *TaskStatusRequest, opts ...grpc.CallOption) (*TaskStatusResponse, error) {
	out := new(TaskStatusResponse)
	err := c.cc.Invoke(ctx, "/server.tq/GetTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TqServer is the server API for Tq service.
type TqServer interface {
	// EchoRequest 和EchoResponse 在下面的代码中定义
	CreateTask(context.Context, *TaskRequest) (*TaskResponse, error)
	GetTaskStatus(context.Context, *TaskStatusRequest) (*TaskStatusResponse, error)
}

// UnimplementedTqServer can be embedded to have forward compatible implementations.
type UnimplementedTqServer struct {
}

func (*UnimplementedTqServer) CreateTask(ctx context.Context, req *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedTqServer) GetTaskStatus(ctx context.Context, req *TaskStatusRequest) (*TaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}

func RegisterTqServer(s *grpc.Server, srv TqServer) {
	s.RegisterService(&_Tq_serviceDesc, srv)
}

func _Tq_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TqServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.tq/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TqServer).CreateTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tq_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TqServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.tq/GetTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TqServer).GetTaskStatus(ctx, req.(*TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tq_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.tq",
	HandlerType: (*TqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Tq_CreateTask_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _Tq_GetTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func (m *TaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Taskid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Taskid)))
		i += copy(dAtA[i:], m.Taskid)
	}
	if len(m.Ipcnt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ipcnt)))
		i += copy(dAtA[i:], m.Ipcnt)
	}
	if len(m.Slotcnt) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Slotcnt)))
		i += copy(dAtA[i:], m.Slotcnt)
	}
	if len(m.Cpucnt) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Cpucnt)))
		i += copy(dAtA[i:], m.Cpucnt)
	}
	if len(m.Memsize) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Memsize)))
		i += copy(dAtA[i:], m.Memsize)
	}
	if len(m.Algtype) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Algtype)))
		i += copy(dAtA[i:], m.Algtype)
	}
	if len(m.Batchsize) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Batchsize)))
		i += copy(dAtA[i:], m.Batchsize)
	}
	if len(m.Epoch) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Epoch)))
		i += copy(dAtA[i:], m.Epoch)
	}
	if len(m.Learningrate) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Learningrate)))
		i += copy(dAtA[i:], m.Learningrate)
	}
	if len(m.Loadpath) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Loadpath)))
		i += copy(dAtA[i:], m.Loadpath)
	}
	if len(m.Savepath) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Savepath)))
		i += copy(dAtA[i:], m.Savepath)
	}
	if len(m.Param1) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Param1)))
		i += copy(dAtA[i:], m.Param1)
	}
	if len(m.Param2) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Param2)))
		i += copy(dAtA[i:], m.Param2)
	}
	return i, nil
}

func (m *TaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	if len(m.Retcode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Retcode)))
		i += copy(dAtA[i:], m.Retcode)
	}
	if len(m.ErrCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.ErrCode)))
		i += copy(dAtA[i:], m.ErrCode)
	}
	return i, nil
}

func (m *TaskStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	return i, nil
}

func (m *TaskStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.ErrCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.ErrCode)))
		i += copy(dAtA[i:], m.ErrCode)
	}
	return i, nil
}

func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Taskid)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Ipcnt)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Slotcnt)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Cpucnt)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Memsize)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Algtype)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Batchsize)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Epoch)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Learningrate)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Loadpath)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Savepath)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Param1)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Param2)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *TaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Retcode)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.ErrCode)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *TaskStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *TaskStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.ErrCode)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func sovServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taskid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipcnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipcnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slotcnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slotcnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpucnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpucnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memsize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memsize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batchsize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batchsize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Epoch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Learningrate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Learningrate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadpath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadpath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Savepath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Savepath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Retcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer   = fmt.Errorf("proto: integer overflow")
)
